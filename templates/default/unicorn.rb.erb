env_file = '<%= @environment_sh_path %>'
config_file = '<%= @app_unicorn_rb_path %>'
instance_eval(File.read(config_file), config_file) if File.exists?(config_file)

working_directory '<%= @current_path %>'
pid '<%= @pid_file %>'

preload_app true
timeout 60
worker_processes <%= @workers %>

before_exec do |server|
  # Support zero-downtime deploys
  ENV['BUNDLE_GEMFILE'] = File.join(ENV['PWD'], 'Gemfile')
end

before_fork do |server, worker|
  # Support zero-downtime deploys
  File.open('<%= @monit_pid_file %>', 'w') { |f| f.write("#{File.read(server.pid).to_i}\n") }
  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill('QUIT', File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end

  # Support reloading the environment
  if File.exists?(env_file)
    new_env = Hash[*File.read(env_file).gsub(/^(?:#.*|\s*)$/, '').gsub(/(?:^\n*|\n*$)/, '').gsub(/^export ([^=]+)=["']?(.*?)["']?$/, "\\1\n\\2").split(/\n/)]
    new_env.delete('PATH')
    if new_env.has_key?('PATH_PREFIX')
      new_env['PATH'] = "#{new_env['PATH_PREFIX']}:#{ENV['PATH']}" unless ENV['PATH'].include?(new_env['PATH_PREFIX'])
      new_env.delete('PATH_PREFIX')
    end
    ENV.update(new_env)
  end
end
